# This is a Job template for restoring PVC content in a given namespace. It does not have any tolerations by default,
# which means it will be scheduled to the nodes for system workloads (=master) in k3s clusters.
#
# The job will
#   * download PVC restore contents from object storage with s3cmd
#   * decrypt with gpg and untar it on volume
#
# See pvc_backup_job.yaml.j2 for details how backup tarballs are created
#
apiVersion: batch/v1
kind: Job
metadata:
  name: restore-pvc-{{ pvc_name }}
  labels:
    application: pebbles-restore-pvc
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        application: pebbles-restore-pvc
    spec:
      securityContext:
        runAsUser: 0
      restartPolicy: Never
      # affinity: only allow one restore job running per eligible node (most cases: just master)
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: application
                  operator: In
                  values:
                  - pebbles-restore-pvc
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: pvc-restore
          image: image-registry.apps.2.rahti.csc.fi/pebbles-public-images/pebbles-deployer:main
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              # bail out on any error
              set -e
              
              start_ts=$(date +%s)
              echo "$(date -Is) restore starting"

              BACKUP_FILE="{{ src_cluster }}__{{ workspace_pseudonym }}__{{ pvc_name }}.tar.gz.gpg"
              S3_URL="s3://{{ workspace_backup_bucket_name }}/{{ src_cluster }}/${BACKUP_FILE}"

              echo "checking backup existence"
              if ! s3cmd -c /run/secrets/pebbles/pvc-restore-secret/s3cfg info ${S3_URL}; then 
                echo "backup ${S3_URL} does not exist"
                echo "$(date -Is) restore skipped"
                exit 0
              fi
              
              echo "download tarball"
              cd /tarball-tmp
              s3cmd -c /run/secrets/pebbles/pvc-restore-secret/s3cfg get ${S3_URL}
              
              echo "import gpg private key"
              gpg --batch --no-tty --import < /run/secrets/pebbles/pvc-restore-secret/encrypt-private-key              
              
              echo "decrypt and untar"
              gpg \
                --decrypt --pinentry-mode=loopback --batch \
                --passphrase=$(cat /run/secrets/pebbles/pvc-restore-secret/encrypt-private-key-password) \
                < ${BACKUP_FILE} \
              | tar xvz -C /target-pvc
             
              # the end
              echo "$(date -Is) restore successful"

          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "512Mi"
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: target-pvc
              mountPath: /target-pvc/{{ pvc_name }}
            - name: tarball-tmp
              mountPath: /tarball-tmp
            - name: pvc-restore-secret
              mountPath: /run/secrets/pebbles/pvc-restore-secret
      volumes:
        - name: target-pvc
          persistentVolumeClaim:
            claimName: {{ pvc_name }}
        - name: pvc-restore-secret
          secret:
            secretName: pvc-restore-secret-{{ pvc_name }}
        - name: tarball-tmp
          emptyDir: {}
